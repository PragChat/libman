{
  "version": 3,
  "sources": [
    "test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# build time tests for map plugin\n# see http://mochajs.org/\n\n\nmap = require '../client/map'\nexpect = require 'expect.js'\n\ndescribe 'map plugin', ->\n\n  describe 'marker coordinates', ->\n    it 'should accept decimal lat/lon', ->\n      marker = map.marker '45.612094, -122.726922 Smith Lake'\n      expect(marker).to.eql {lat: 45.612094, lon: -122.726922, label: 'Smith Lake'}\n    it 'should accept decimal lat/lon without comma', ->\n      marker = map.marker '45.612094 -122.726922 Smith Lake'\n      expect(marker).to.eql {lat: 45.612094, lon: -122.726922, label: 'Smith Lake'}\n    it 'should accept decimal lat/lon without space', ->\n      marker = map.marker '45.612094,-122.726922 Smith Lake'\n      expect(marker).to.eql {lat: 45.612094, lon: -122.726922, label: 'Smith Lake'}\n\n    it 'should accept decimal lat/lon without decimal point', ->\n      marker = map.marker '45, -122 Smith Lake'\n      expect(marker).to.eql {lat: 45, lon: -122, label: 'Smith Lake'}\n    it 'should accept decimal lat/lon without decimal point or comma', ->\n      marker = map.marker '45 -122 Smith Lake'\n      expect(marker).to.eql {lat: 45, lon: -122, label: 'Smith Lake'}\n\n    it 'should accept nautical lat/lon', ->\n      marker = map.marker '45°36\\'43.5\"N 122°43\\'36.9\"W Smith Lake'\n      expect(marker).to.eql {lat: 45.61208333333334, lon: -122.72691666666667, label: 'Smith Lake'}\n    it 'should accept nautical lat/lon in lower case', ->\n      marker = map.marker '45°36\\'43.5\"n 122°43\\'36.9\"w Smith Lake'\n      expect(marker).to.eql {lat: 45.61208333333334, lon: -122.72691666666667, label: 'Smith Lake'}\n    it 'should accept nautical lat/lon sans seconds', ->\n      marker = map.marker '45°36\\'N 122°43\\'W Smith Lake'\n      expect(marker).to.eql {lat: 45.6, lon: -122.71666666666667, label: 'Smith Lake'}\n\n  describe 'marker labels', ->\n    it 'should accept decimal lat/lon without label', ->\n      marker = map.marker '45.612094, -122.726922'\n      expect(marker).to.eql {lat: 45.612094, lon: -122.726922, label: ''}\n    it 'should accept decimal lat/lon with internal links in labels', ->\n      marker = map.marker '45.612094, -122.726922 See [[Portland\\'s Smith Lake]]'\n      expect(marker).to.eql {lat: 45.612094, lon: -122.726922, label: 'See <internal>'}\n    it 'should accept decimal lat/lon with internal links in labels', ->\n      marker = map.marker '45.612094, -122.726922 See [http://www.oregonmetro.gov/parks/smith-and-bybee-wetlands-natural-area metro]'\n      expect(marker).to.eql {lat: 45.612094, lon: -122.726922, label: 'See <external>'}\n    it 'should accept decimal lat/lon with escaped punctuation in labels', ->\n      marker = map.marker '45.612094, -122.726922 Smith & Bybee Wetlands'\n      expect(marker).to.eql {lat: 45.612094, lon: -122.726922, label: 'Smith &amp; Bybee Wetlands'}\n\n  describe 'markup', ->\n    hi = \"Hello\"\n    ho = \"World\"\n    n46 = \"46., -122. Wind River\"\n    n47 = \"47., -122. Bagby\"\n    li = \"LINEUP\"\n    bo = \"BOUNDARY\"\n    p46 = {lat:46,lon:-122,label:'Wind River'}\n    p47 = {lat:47,lon:-122,label:'Bagby'}\n    pi = {lat: 51.5, lon: 0.0, label: 'North Greenwich'}\n\n    it 'should accept caption only', ->\n      parse = map.parse {'text': hi}\n      expect(parse).to.eql {markers:[], caption:'Hello', boundary:[]}\n\n    it 'should accept marker only', ->\n      parse = map.parse {'text': n46}\n      expect(parse).to.eql {markers:[p46], caption:'', boundary:[p46]}\n\n    it 'should accept mixed markers and caption', ->\n      parse = map.parse {'text': [hi,n46,ho,n47].join(\"\\n\")}\n      expect(parse).to.eql {markers:[p46,p47], caption:'Hello<br>World', boundary:[p46,p47]}\n\n    it 'should merge markers with lineup', ->\n      parse = map.parse {'text': [n46,li].join(\"\\n\")}\n      expect(parse).to.eql {markers:[p46,pi], lineupMarkers:[pi], caption:'', boundary:[p46,pi], tools: {freeze: true}}\n\n    it 'should separate markers from lineup for boundary', ->\n      parse = map.parse {'text': [n46,bo,li].join(\"\\n\")}\n      expect(parse).to.eql {markers:[p46,pi], lineupMarkers:[pi], caption:'', boundary:[p46], tools: {freeze: true}}\n\n    it 'should accept boundary without marker', ->\n      parse = map.parse {'text': [bo+n46].join(\"\\n\")}\n      expect(parse).to.eql {markers:[], caption:'', boundary:[p46]}\n\n    it 'should accept multiple boundary without marker', ->\n      parse = map.parse {'text': [bo+n46, bo+n47].join(\"\\n\")}\n      expect(parse).to.eql {markers:[], caption:'', boundary:[p46,p47]}\n\n    it 'should add markers to boundary until stopped', ->\n      parse = map.parse {'text': [n46,bo,li,bo+n47].join(\"\\n\")}\n      expect(parse).to.eql {markers:[p46,pi], lineupMarkers:[pi], caption:'', boundary:[p46,p47], tools: {freeze: true}}\n\n    it 'should accept overlay url and bounds', ->\n      parse = map.parse {'text': \"OVERLAY http://example.com 45.5,-122.0 44.5,-123.0\"}\n      expect(parse).to.eql {markers:[], caption:'', boundary:[], overlays:[{url:'http://example.com',bounds:[[45.5,-122.0],[44.5,-123.0]]}]}\n\n    it 'should accept overlay url and bounds with space after comma', ->\n      parse = map.parse {'text': \"OVERLAY http://example.com 45.5, -122.0 44.5, -123.0\"}\n      expect(parse).to.eql {markers:[], caption:'', boundary:[], overlays:[{url:'http://example.com',bounds:[[45.5,-122.0],[44.5,-123.0]]}]}\n\n    it 'frozen markers should be markers', ->\n      parse = map.parse {'text': '', 'frozen': p46}\n      expect(parse).to.eql {markers:[p46], caption:'', boundary:[p46]}\n\n    it 'lineup with frozen should be lineupMarkers', ->\n      parse = map.parse {'text': [n46,li].join(\"\\n\"), 'frozen': p47}\n      expect(parse).to.eql {markers:[p47,p46], lineupMarkers:[pi], caption:'', boundary: [p47,p46], tools: {freeze: true}}\n\n    it 'should add SEARCH tool', ->\n      parse = map.parse {'text': 'SEARCH'}\n      expect(parse).to.eql {markers:[], caption:'',boundary:[],tools: {search: true}}\n\n    it 'should add LOCATE tool', ->\n      parse = map.parse {'text': 'LOCATE'}\n      expect(parse).to.eql {markers:[], caption:'',boundary:[],tools: {locate: true}}\n\n\n"
  ],
  "sourceRoot": ""
}