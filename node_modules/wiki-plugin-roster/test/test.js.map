{
  "version": 3,
  "sources": [
    "test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# build time tests for roster plugin\n# see http://mochajs.org/\n\n{parse, includes} = require '../client/roster'\nexpect = require 'expect.js'\n\n# mock wiki.site(site).flag()\nwiki = {}\nwiki.site = (site) -> {\n  flag: -> \"//#{site}/favicon.png\"\n}\n# and make wiki global\nglobal.wiki = wiki\n\ndescribe 'roster plugin', ->\n\n  describe 'site markup', ->\n\n    it 'makes image', ->\n      result = parse null, {text: 'fed.wiki.org'}\n      expect(result).to.match /<img class=\"remote\" src=\"\\/\\/fed.wiki.org\\/favicon.png\"/\n\n    it 'has title', ->\n      result = parse null, {text: 'fed.wiki.org'}\n      expect(result).to.match /title=\"fed.wiki.org\"/\n\n    it 'has site data', ->\n      result = parse null, {text: 'fed.wiki.org'}\n      expect(result).to.match /data-site=\"fed.wiki.org\"/\n\n    it 'has slug data', ->\n      result = parse null, {text: 'fed.wiki.org'}\n      expect(result).to.match /data-slug=\"welcome-visitors\"/\n\n  describe 'end of line markup', ->\n\n    it 'has anchor', ->\n      result = parse null, {text: 'fed.wiki.org'}\n      expect(result).to.match /<a class='loadsites' href= \"\\/#\"/\n\n    it 'has title', ->\n      result = parse null, {text: 'fed.wiki.org'}\n      expect(result).to.match /title=\"add these 1 sites\\nto neighborhood\"/\n\n    it 'has » at end of line', ->\n      result = parse null, {text: 'fed.wiki.org'}\n      expect(result).to.match />»<\\/a><br>/\n\n  describe 'category formatting', ->\n\n    it 'end of line', ->\n      result = parse null, {text: 'students'}\n      expect(result).to.match /students *<br>/\n\n  describe 'category access', ->\n    stub =\n      addClass: (c) -> this.c = c\n      get: (n) -> this\n\n    it 'announces roster-source', ->\n      parse stub, {text: \"wiki.org\"}\n      expect(stub.c).to.be 'roster-source'\n\n    it 'has category all', ->\n      parse stub, {text: \"wiki.org\\nfoo.wiki.org\"}\n      expect(stub.getRoster()).to.eql { all: [ 'wiki.org', 'foo.wiki.org' ] }\n\n    it 'allows prefix category name', ->\n      parse stub, {text: \"ward\\nwiki.org\\nfoo.wiki.org\"}\n      expect(stub.getRoster().ward).to.eql [ 'wiki.org', 'foo.wiki.org' ]\n\n    it 'allows sufix category name', ->\n      parse stub, {text: \"wiki.org\\nfoo.wiki.org\\nward\"}\n      expect(stub.getRoster().ward).to.eql [ 'wiki.org', 'foo.wiki.org' ]\n"
  ],
  "sourceRoot": ""
}