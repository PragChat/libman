{
  "version": 3,
  "sources": [
    "test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "method = require '../client/method'\nexpect = require 'expect.js'\nasValue = method.asValue\n\ndescribe 'method plugin', ->\n\n\tdescribe 'values', ->\n\t\ttraits = (value) -> [\n\t\t\tmethod.asValue(value),\n\t\t\tmethod.asUnits(value),\n\t\t\tmethod.hasUnits(value)]\n\n\t\tit 'can be null', ->\n\t\t\t# expect(traits null).to.eql [NaN, [], false]\n\n\t\tit 'can be a number', ->\n\t\t\texpect(traits 100).to.eql [100, [], false]\n\n\t\tit 'can be a string', ->\n\t\t\texpect(traits \"200\").to.eql [200, [], false]\n\n\t\tit 'can be an array', ->\n\t\t\texpect(traits [300,400,500]).to.eql [300, [], false]\n\n\t\tit 'can be an object', ->\n\t\t\texpect(traits {value: 400}).to.eql [400, [], false]\n\n\t\tit 'can have units', ->\n\t\t\texpect(traits {value: 500, units:['mph']}).to.eql [500, ['mph'], true]\n\n\t\tit 'can have a value with units', ->\n\t\t\texpect(traits {value: {value: 600, units:['ppm']}}).to.eql [600, ['ppm'], true]\n\n\t\tit 'can have empty units', ->\n\t\t\texpect(traits {value: 700, units:[]}).to.eql [700, [], false]\n\n\t\tit 'can be an array with units within', ->\n\t\t\texpect(traits [{value: 800, units:['feet']}, 900]).to.eql [800, ['feet'], true]\n\n\tdescribe 'simplify', ->\n\n\t\tit 'no units', ->\n\t\t\tvalue = method.simplify {value: 100}\n\t\t\texpect(value).to.be 100\n\n\t\tit 'empty units', ->\n\t\t\tvalue = method.simplify {value: 200, units: []}\n\t\t\texpect(value).to.be 200\n\n\tdescribe 'parsing', ->\n\n\t\tit 'recognizes numbers', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"123\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list).to.eql [123]\n\t\t\t\tdone()\n\n\t\tit 'defines values', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"321 abc\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.output.abc).to.be 321\n\t\t\t\tdone()\n\n\t\tit 'retrieves values', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"abc\"}\n\t\t\t\tinput: {abc: 456}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list).to.eql [456]\n\t\t\t\tdone()\n\n\t\tit 'computes sums', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"abc\\n2000\\nSUM\\n1000\\nSUM xyz\"}\n\t\t\t\tinput: {abc: 456}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.output.xyz).to.be 3456\n\t\t\t\tdone()\n\n\tdescribe 'errors', ->\n\n\t\tit 'illegal input', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"!!!\"}\n\t\t\t\tcaller: {errors: []}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.caller.errors[0].message).to.be \"can't parse '!!!'\"\n\t\t\t\tdone()\n\n\t\tit 'undefined variable', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"foo\"}\n\t\t\t\tcaller: {errors: []}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.caller.errors[0].message).to.be \"can't find value of 'foo'\"\n\t\t\t\tdone()\n\n\t\tit 'undefined function', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"RUMBA\"}\n\t\t\t\tcaller: {errors: []}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.caller.errors[0].message).to.be \"don't know how to 'RUMBA'\"\n\t\t\t\tdone()\n\n\t\tit 'precomputed checks', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"2\\n3\\nSUM five\", checks: {five: 6}}\n\t\t\t\tcaller: {errors: []}\n\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.caller.errors[0].message).to.be \"five != 6.0000\"\n\t\t\t\tdone()\n\n\tdescribe 'unit parsing', ->\n\n\t\tit 'sorts words', ->\n\t\t\tunits = method.parseUnits \"Pound Foot\"\n\t\t\texpect(units).to.eql [\"foot\", \"pound\"]\n\n\t\tit 'ignores extra spaces', ->\n\t\t\tunits = method.parseUnits \"  Pound    Foot   \"\n\t\t\texpect(units).to.eql [\"foot\", \"pound\"]\n\n\t\tit 'ignores non-word characters', ->\n\t\t\tunits = method.parseUnits \"$ & ¢\"\n\t\t\texpect(units).to.eql []\n\n\t\tit 'expands squares and cubes', ->\n\t\t\tunits = method.parseUnits \"Square Pound Cubic Foot\"\n\t\t\texpect(units).to.eql [\"foot\", \"foot\", \"foot\", \"pound\", \"pound\"]\n\n\t\tit 'recognizes ratios', ->\n\t\t\tunits = method.parseRatio \"(Pounds / Square Foot)\"\n\t\t\texpect(units).to.eql {numerator: [\"pounds\"], denominator: [\"foot\", \"foot\"]}\n\n\t\tit 'recognizes non-ratios', ->\n\t\t\tunits = method.parseRatio \"(Foot Pound)\"\n\t\t\texpect(units).to.eql [\"foot\", \"pound\"]\n\n\t\tit 'recognizes inversions', ->\n\t\t\tunits = method.parseRatio \"( / Seconds)\"\n\t\t\texpect(units).to.eql {numerator: [], denominator: [\"seconds\"]}\n\n\t\tit 'ignores text outside parens', ->\n\t\t\tunits = method.parseLabel \"Speed (MPH) Moving Average\"\n\t\t\texpect(units).to.eql {units: [\"mph\"]}\n\n\t\tit 'recognizes conversions as unit pairs', ->\n\t\t\tunits = method.parseLabel \"1.47\t(Feet / Seconds) from (Miles / Hours) \"\n\t\t\texpect(units).to.eql\n\t\t\t\tunits: { numerator: [ 'feet' ], denominator: [ 'seconds' ] }\n\t\t\t\tfrom: { numerator: [ 'miles' ], denominator: [ 'hours' ] }\n\n\t\tit 'defines values as objects', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"321 abc (mph)\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.output['abc (mph)']).to.eql {value: 321, units: [\"mph\"]}\n\t\t\t\tdone()\n\n\t\tit 'defines conversion constants as objects', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"1.47 (Feet/Seconds) from (Miles/Hours)\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.output['(Feet/Seconds) from (Miles/Hours)']).to.eql\n\t\t\t\t\tvalue: 1.47\n\t\t\t\t\tunits:\n\t\t\t\t\t\tnumerator:['feet']\n\t\t\t\t\t\tdenominator:['seconds']\n\t\t\t\t\tfrom:\n\t\t\t\t\t\tnumerator:['miles']\n\t\t\t\t\t\tdenominator:['hours']\n\t\t\t\tdone()\n\n\tdescribe 'conversions', ->\n\n\t\tinput =\n\t\t\t\"(fps) from (mph)\":\n\t\t\t\tvalue: 88 / 60\n\t\t\t\tunits: ['fps']\n\t\t\t\tfrom: ['mph']\n\t\t\t\"speed\":\n\t\t\t\tvalue: 30\n\t\t\t\tunits: ['mph']\n\n\t\tit 'apply to arguments', (done) ->\n\t\t\tstate =\n\t\t\t\tinput: input\n\t\t\t\titem: {text: \"30 (mph)\\n44 (fps)\\nSUM speed\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.output['speed']).to.eql\n\t\t\t\t\tvalue: 88\n\t\t\t\t\tunits: ['fps']\n\t\t\t\tdone()\n\n\t\tit 'apply to variables', (done) ->\n\t\t\tstate =\n\t\t\t\tinput: input\n\t\t\t\titem: {text: \"speed\\n44 (fps)\\nSUM speed\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.output['speed']).to.eql\n\t\t\t\t\tvalue: 88\n\t\t\t\t\tunits: ['fps']\n\t\t\t\tdone()\n\n\t\tit 'apply to results', (done) ->\n\t\t\tstate =\n\t\t\t\tinput: input\n\t\t\t\titem: {text: \"60 (mph)\\nSUM (fps)\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.output['(fps)']).to.eql\n\t\t\t\t\tvalue: 88\n\t\t\t\t\tunits: ['fps']\n\t\t\t\tdone()\n\n\t\tit 'selected from alternatives', (done) ->\n\t\t\talternatives =\n\t\t\t\"speeding\":\n\t\t\t\tvalue: 120\n\t\t\t\tunits: ['mph']\n\t\t\t\"(fps) from (mph)\":\n\t\t\t\tvalue: 88 / 60\n\t\t\t\tunits: ['fps']\n\t\t\t\tfrom: ['mph']\n\t\t\t\"(miles/hour) from (mph)\":\n\t\t\t\tvalue: 1\n\t\t\t\tunits: {numerator: ['miles'], denominator: ['hour']}\n\t\t\t\tfrom: ['mph']\n\t\t\t\"speed\":\n\t\t\t\tvalue: 88\n\t\t\t\tunits: ['fps']\n\t\t\tstate =\n\t\t\t\tinput: alternatives\n\t\t\t\titem: {text: \"speeding\\nSUM (fps)\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.output['(fps)']).to.eql\n\t\t\t\t\tvalue: 88*2\n\t\t\t\t\tunits: ['fps']\n\t\t\t\tdone()\n\n\t\tit 'optional when units are acceptable', (done) ->\n\t\t\tstate =\n\t\t\t\tinput: input\n\t\t\t\titem: {text: \"60 (mph)\\n30 (mph)\\nSUM\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list[0]).to.eql\n\t\t\t\t\tvalue: 90\n\t\t\t\t\tunits: ['mph']\n\t\t\t\tdone()\n\n\t\tit 'reported when missing', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"22 (fps)\\n15 (mps)\\nSUM\"}\n\t\t\t\tcaller: {errors: []}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list[0]).to.eql\n\t\t\t\t\tvalue: 22\n\t\t\t\t\tunits: ['fps']\n\t\t\t\texpect(state.caller.errors[0].message).to.be \"can't convert to [mps] from [fps]\"\n\t\t\t\tdone()\n\n\t\tit 'adds units to SHOW legend', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"36 (in/yd)\\nSHOW Mumble\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.show[0]).to.eql\n\t\t\t\t\tlegend: \"Mumble<br>( in / yd )\"\n\t\t\t\t\treadout: \"36\"\n\t\t\t\tdone()\n\n\tdescribe 'products', ->\n\n\t\tinput =\n\t\t\t\"(Feet/Seconds) per (Miles/Hours)\":\n\t\t\t\tvalue: 88 / 60\n\t\t\t\tunits: ['fps']\n\t\t\t\tfrom: ['mph']\n\t\t\t\"side\":\n\t\t\t\tvalue: 6\n\t\t\t\tunits: ['Inches']\n\n\t\tit 'repeats units', (done) ->\n\t\t\tstate =\n\t\t\t\tinput: input\n\t\t\t\titem: {text: \"side\\nside\\nPRODUCT area\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list[0]).to.eql\n\t\t\t\t\tvalue: 36\n\t\t\t\t\tunits: ['Inches', 'Inches']\n\t\t\t\tdone()\n\n\t\tit 'cancels units', (done) ->\n\t\t\tstate =\n\t\t\t\tinput: input\n\t\t\t\titem: {text: \"2 (yd)\\n3 (ft/yd)\\n12 (in/ft)\\nPRODUCT height\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list[0]).to.eql\n\t\t\t\t\tvalue: 72\n\t\t\t\t\tunits: ['in']\n\t\t\t\tdone()\n\n\t\tit 'invert units for ratio', (done) ->\n\t\t\tstate =\n\t\t\t\tinput: input\n\t\t\t\titem: {text: \"72 (in)\\n2 (yd)\\nRATIO\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list[0]).to.eql\n\t\t\t\t\tvalue: 36\n\t\t\t\t\tunits: {numerator: ['in'], denominator: ['yd']}\n\t\t\t\tdone()\n\n\tdescribe 'expressions', ->\n\n\t\tit 'can be lexed with literals', ->\n\t\t\ttokens = method.lexer '12+(345-678)*910'\n\t\t\texpect(tokens).to.eql [12, '+', '(', 345, '-', 678, ')', '*', 910]\n\n\t\tit 'can be lexed with variables', ->\n\t\t\tsyms = {alpha: 100, beta: 200}\n\t\t\ttokens = method.lexer '12+(alpha-678)*beta', syms\n\t\t\texpect(tokens).to.eql [12, '+', '(', 100, '-', 678, ')', '*', 200]\n\n\t\tit 'can be constant', ->\n\t\t\tvalue = method.parser [12]\n\t\t\texpect(value).to.be 12\n\n\t\tit 'do multiply first', ->\n\t\t\tvalue = method.parser [2, '+', 3, '*', 5]\n\t\t\texpect(value).to.be 17\n\n\t\tit 'do parens first', ->\n\t\t\tvalue = method.parser ['(', 2, '+', 3, ')', '*', 5]\n\t\t\texpect(value).to.be 25\n\n\t\tit 'applied by CALC', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"CALC 12+(345-678)*910\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list[0]).to.be -303018\n\t\t\t\tdone()\n\n\t\tit 'applied by CALC with local variables', (done) ->\n\t\t\tstate =\n\t\t\t\tlocal: {\"Hourly Rate\": 16.45, \"Regular Hours\": 40, \"Overtime Hours\": 12}\n\t\t\t\titem: {text: \"CALC Rate * ( Regular + 1.5 * Overtime )\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(Math.round(state.list[0])).to.eql 954\n\t\t\t\tdone()\n\n\t\tit 'applied by CALC with recalled input variables', (done) ->\n\t\t\tstate =\n\t\t\t\tinput: {\"Hourly Rate\": 16.45, \"Regular Hours\": 40, \"Overtime Hours\": 12}\n\t\t\t\titem: {text: \"Hourly Rate\\nRegular Hours\\nOvertime Hours\\nCALC Rate * ( Regular + 1.5 * Overtime )\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(Math.round(state.list[0])).to.eql 954\n\t\t\t\tdone()\n\n\t\tit 'applied by CALC with computed variables and units', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"20.00 Rate (dollar / hour)\\n40 Regular (hour)\\n12 Overtime (hour)\\nCALC Rate * ( Regular + 1.5 * Overtime )\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list[0]).to.eql {value: 1160.00, units: ['dollar']}\n\t\t\t\tdone()\n\n\t\tit 'applied by CALC with all operators, variables and units', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"10 w (in)\\n30 h (in)\\n15 t (s)\\nCALC t*(h/t + w/t - (h+w)/t)\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list[0]).to.eql {value: 0, units: ['in']}\n\t\t\t\tdone()\n\n\tdescribe 'scrubbing', ->\n\t\tit 'sums 2 + 3', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"2\\n3\\nSUM\"}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list[0]).to.eql 5\n\t\t\t\tdone()\n\n\t\tit 'sums 2 + 3, scrubbing 2 to 1.5', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"2\\n3\\nSUM\"}\n\t\t\t\tpatch: {'1': 1.5}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list[0]).to.eql 4.5\n\t\t\t\tdone()\n\n\t\tit 'sums 2 + 3, scrubbing 3 to 3.3', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"2\\n3\\nSUM\"}\n\t\t\t\tpatch: {'2': 3.3}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list[0]).to.eql 5.3\n\t\t\t\tdone()\n\n\t\tit 'sums 2 + 3 inches, scrubbing 3 to 3.3', (done) ->\n\t\t\tstate =\n\t\t\t\titem: {text: \"2 (in)\\n3 (in)\\nSUM\"}\n\t\t\t\tpatch: {'2': 3.3}\n\t\t\tmethod.dispatch state, (state) ->\n\t\t\t\texpect(state.list[0]).to.eql { value: 5.3, units: [ 'in' ] }\n\t\t\t\tdone()\n"
  ],
  "sourceRoot": ""
}