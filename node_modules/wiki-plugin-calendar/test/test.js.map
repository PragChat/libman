{
  "version": 3,
  "sources": [
    "test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "report = require '../client/calendar'\nexpect = require 'expect.js'\n\ndescribe 'calendar plugin', ->\n\n\tdescribe 'parsing', ->\n\n\t\tit 'recognizes decades', ->\n\t\t\texpect(report.parse \"1960 DECADE\").to.eql [{year: 1960, span:'DECADE'}]\n\t\t\texpect(report.parse \"DECADE 1960\").to.eql [{year: 1960, span:'DECADE'}]\n\t\t\texpect(report.parse \"60S\").to.eql [{year: 1960, span:'DECADE'}]\n\n\t\tit 'recognizes half decades', ->\n\t\t\texpect(report.parse \"60S EARLY\").to.eql [{year: 1960, span:'EARLY'}]\n\t\t\texpect(report.parse \"EARLY 60S\").to.eql [{year: 1960, span:'EARLY'}]\n\t\t\texpect(report.parse \"LATE 60S\").to.eql [{year: 1960, span:'LATE'}]\n\n\t\tit 'recognizes years', ->\n\t\t\texpect(report.parse \"1960\").to.eql [{year: 1960, span:'YEAR'}]\n\n\t\tit 'recognizes months', ->\n\t\t\texpect(report.parse \"1960 MAR\").to.eql [{year: 1960, month:3, span:'MONTH'}]\n\t\t\texpect(report.parse \"MAR 1960\").to.eql [{year: 1960, month:3, span:'MONTH'}]\n\t\t\texpect(report.parse \"MARCH 1960\").to.eql [{year: 1960, month:3, span:'MONTH'}]\n\n\t\tit 'recognizes days', ->\n\t\t\texpect(report.parse \"MAR 5 1960\").to.eql [{year: 1960, month:3, day: 5, span:'DAY'}]\n\t\t\texpect(report.parse \"1960 MAR 5\").to.eql [{year: 1960, month:3, day: 5, span:'DAY'}]\n\t\t\texpect(report.parse \"5 MAR 1960\").to.eql [{year: 1960, month:3, day: 5, span:'DAY'}]\n\n\t\tit 'recognizes labels', ->\n\t\t\texpect(report.parse \"Ward's CHM Interview\").to.eql [{label: \"Ward's CHM Interview\"}]\n\t\t\texpect(report.parse \"APRIL 24 2006 Ward's CHM Interview\").to.eql [{year: 2006, month:4, day: 24, span:'DAY', label: \"Ward's CHM Interview\"}]\n\t\t\texpect(report.parse \" APRIL  24  2006\\tWard's  CHM  Interview  \").to.eql [{year: 2006, month:4, day: 24, span:'DAY', label: \"Ward's CHM Interview\"}]\n\n\tdescribe 'applying', ->\n\n\t\ttoday = new Date 2013, 2-1, 3\n\t\tinterview = new Date 2006, 4-1, 24\n\t\toneDayInMS = 24*60*60*1000\n\n\t\tit 'recalls input', ->\n\t\t\tinput = {interview: {date: interview}}\n\t\t\toutput = {}\n\t\t\trows = report.parse \"interview\"\n\t\t\texpect(report.apply input, output, today, rows).to.eql [\n\t\t\t\tdate: interview\n\t\t\t\tlabel:'interview'\n\t\t\t\tunits: ['day']\n\t\t\t\tvalue: Math.floor(interview.getTime() / oneDayInMS)\n\t\t\t\tprecision: oneDayInMS\n\t\t\t]\n\n\t\tit 'extends today', ->\n\t\t\tinput = {}\n\t\t\toutput = {}\n\t\t\trows = report.parse \"APRIL 1 April Fools Day\"\n\t\t\tresults = report.apply input, output, today, rows\n\t\t\texpect(results).to.eql [\n\t\t\t\tdate: new Date(2013, 4-1, 1)\n\t\t\t\tmonth: 4\n\t\t\t\tday: 1\n\t\t\t\tspan:'DAY'\n\t\t\t\tlabel: 'April Fools Day'\n\t\t\t\tunits: ['day']\n\t\t\t\tvalue: Math.floor(new Date(2013, 4-1, 1).getTime() / oneDayInMS)\n\t\t\t\tprecision: oneDayInMS\n\t\t\t]\n\t\t\texpect(output).to.eql {'April Fools Day': {date: new Date(2013, 4-1, 1), span:'DAY'}}\n\n\tdescribe 'radarSource', ->\n\t\tmock = {}\n\t\tbeforeEach ->\n\t\t\tmock.el = {}\n\t\t\tmock.$el =\n\t\t\t\taddClass : (c) -> mock.actualClass = c\n\t\t\t\tget : (n) -> mock.el\n\t\t\tresults = report.apply {}, {}, new Date(), report.parse('''\n\t\t\t\t2015 SEP 1 Starts Now\n\t\t\t\tLATE 90S Some languages were born\n\t\t\t''')\n\t\t\treport.radarSource(mock.$el, results)\n\n\t\tit 'calls addClass with \"radar-source\"', ->\n\t\t\texpect(mock.actualClass).to.be 'radar-source'\n\n\t\tit 'adds radarData() to the DOM element', ->\n\t\t\texpect(mock.el).to.have.key 'radarData'\n\n\t\tit 'uses the labels as keys in the radarData', ->\n\t\t\texpect(mock.el.radarData()).to.have.key 'Starts Now'\n\n\t\tit 'puts the distance from the Epoch into the values in the radarData', ->\n\t\t\tdata = mock.el.radarData()\n\t\t\tdaysSinceEpoch = Math.floor(new Date(2015, 8, 1).getTime() / (24 * 60 * 60 * 1000) ) # 16,679\n\t\t\texpect(data['Starts Now']).to.have.key 'value'\n\t\t\texpect(data['Starts Now'].value).to.eql daysSinceEpoch\n\n\t\tit 'specifies units & precision with values in the radarData', ->\n\t\t\tdata = mock.el.radarData()\n\t\t\toneDayInMS = 24 * 60 * 60 * 1000 # 86,400,000\n\t\t\texpect(data['Starts Now']).to.have.key 'units'\n\t\t\texpect(data['Starts Now'].units).to.eql ['day']\n\t\t\texpect(data['Starts Now']).to.have.key 'precision'\n\t\t\texpect(data['Starts Now'].precision).to.eql oneDayInMS\n\n\t\tit 'chooses units & precision to match the parsed span of the date', ->\n\t\t\tdata = mock.el.radarData()\n\t\t\toneDecadeInMS = 10 * 365.25 * 24 * 60 * 60 * 1000 # 315,576,000,000\n\t\t\texpect(data['Some languages were born']).to.have.key 'units'\n\t\t\texpect(data['Some languages were born'].units).to.eql ['decade']\n\t\t\texpect(data['Some languages were born']).to.have.key 'precision'\n\t\t\texpect(data['Some languages were born'].precision).to.eql oneDecadeInMS\n\n\t# describe 'formatting', ->\n\t# \tit 'returns an array of strings', ->\n\t# \t\trows = report.format report.parse \"\"\n\t# \t\texpect(rows).to.eql []\n"
  ],
  "sourceRoot": ""
}