{
  "version": 3,
  "sources": [
    "test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# build time tests for grep plugin\n# see http://mochajs.org/\n\ngrep = require '../client/grep'\nexpect = require 'expect.js'\n\ndescribe 'grep plugin', ->\n\n  describe 'parse', ->\n    it 'accepts empty', ->\n      [program,listing,errors] = grep.parse ''\n      expect(errors).to.eql 0\n\n    it 'accepts whitespace', ->\n      [program,listing,errors] = grep.parse '   \\n   '\n      expect(errors).to.eql 0\n\n    it 'ignores empty lines', ->\n      [program,listing,errors] = grep.parse '   \\n    \\n'\n      expect(program).to.eql []\n\n    it 'accepts item types', ->\n      [program,listing,errors] = grep.parse 'ITEM paragraph'\n      expect(program).to.eql [{'op': 'ITEM', 'type': 'paragraph'}]\n\n    it 'accepts action types', ->\n      [program,listing,errors] = grep.parse 'ACTION fork'\n      expect(program).to.eql [{'op': 'ACTION', 'type': 'fork'}]\n\n    it 'accepts text patterns', ->\n      [program,listing,errors] = grep.parse 'TEXT foo'\n      expect(program).to.eql [{'op':'TEXT', 'regex': {}}]\n\n    it 'accepts item with unspecified type', ->\n      [program,listing,errors] = grep.parse 'ITEM'\n      expect(program).to.eql [{'op': 'ITEM', 'type': ''}]\n\n\n  describe 'parse fails on', ->\n    it 'unknown operation', ->\n      [program,listing,errors] = grep.parse 'MUMBLE'\n      expect(errors).to.eql 1\n\n    it 'unreasonable type', ->\n      [program,listing,errors] = grep.parse 'ITEM void*'\n      expect(errors).to.eql 1\n\n    it 'irregular expression', ->\n      [program,listing,errors] = grep.parse 'TEXT a)b'\n      expect(errors).to.eql 1\n\n  page = {\n    'title':'Federated Wiki',\n    'story':[\n      {'type':'paragraph'; 'text':'It keeps getting better.'},\n      {\"type\":'video'; 'text':'YOUTUBE 2R3LM_A7Cg4\\nWard introduces the parts.'}\n    ],\n    'journal':[\n      {'type':'create'},\n      {'type':'fork', 'site':'fed.wiki.org'}\n    ]\n  }\n\n  describe 'sample eval', ->\n    it 'should find a video', ->\n      expect(grep.evalPage page, [{'op': 'ITEM', 'type':'video'}], 0).to.be true\n\n    it 'should not find a method', ->\n      expect(grep.evalPage page, [{'op': 'ITEM', 'type':'method'}], 0).to.be false\n\n    it 'should find a fork', ->\n      expect(grep.evalPage page, [{'op': 'ACTION', 'type':'fork'}], 0).to.be true\n\n    it 'should not find a delete', ->\n      expect(grep.evalPage page, [{'op': 'ACTION', 'type':'delete'}], 0).to.be false\n\n    it 'should find ward in text', ->\n      expect(grep.evalPage page, [{'op': 'ITEM', 'type':''}, {'op':'TEXT', 'regex':/ward/im}], 0).to.be true\n\n    it 'should find federated in title', ->\n      expect(grep.evalPage page, [{'op': 'TITLE', 'regex':/federated/im}], 0).to.be true\n\n\n"
  ],
  "sourceRoot": ""
}