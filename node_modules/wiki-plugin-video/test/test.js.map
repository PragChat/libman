{
  "version": 3,
  "sources": [
    "test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "video = require '../client/video'\nexpect = require 'expect.js'\n\ndescribe 'video plugin', ->\n\n  describe 'parsing', ->\n\n    it 'parses string', ->\n      result = video.parse('YOUTUBE a1234\\nDummy caption\\nMore caption text')\n      expect(result.player).to.be 'YOUTUBE'\n      expect(result.key).to.be 'a1234'\n      expect(result.caption).to.be ' Dummy caption More caption text '\n\n    it 'allows video declaration to be below caption', ->\n      result = video.parse('Dummy caption\\nMore caption text\\nYOUTUBE a1234')\n      expect(result.player).to.be 'YOUTUBE'\n      expect(result.key).to.be 'a1234'\n      expect(result.caption).to.be ' Dummy caption More caption text '\n\n    it 'matches mime type as HTML5 option', ->\n      result = video.parse('HTML5 mp4 http://example.com/video.mp4')\n      expect(result.player).to.be 'HTML5'\n      expect(result.key).to.be 'http://example.com/video.mp4'\n      expect(result.options).to.be 'mp4'\n\n  describe 'embedding', ->\n\n    it 'renders Youtube video', ->\n      embed = video.embed({ player: 'YOUTUBE', options: '', key: '12345'  })\n      expect(embed).to.match ///\n        <iframe\n        [^>]*\n        src=\"https://www\\.youtube-nocookie\\.com/embed/12345\\?rel=0\"\n        ///\n\n    it 'renders Youtube playlist', ->\n      embed = video.embed({ player: 'YOUTUBE', options: 'PLAYLIST', key: '12345' })\n      expect(embed).to.match ///\n        <iframe\n        [^>]*\n        src=\"https://www\\.youtube-nocookie\\.com/embed/videoseries\\?list=12345\"\n        ///\n\n    it 'renders Vimeo video', ->\n      embed = video.embed({ player: 'VIMEO', key: '12345' })\n      expect(embed).to.match ///\n        <iframe\n        [^>]*\n        src=\"https://player.vimeo.com/video/12345\\?title=0&amp;byline=0&amp;portrait=0\"\n        ///\n\n    it 'renders Archive video', ->\n      embed = video.embed({ player: 'ARCHIVE', key: '12345' })\n      expect(embed).to.match ///\n        <iframe\n        [^>]*\n        src=\"https://archive.org/embed/12345\"\n        ///\n\n    it 'renders TED video', ->\n      embed = video.embed({ player: 'TED', key: '12345' })\n      expect(embed).to.match ///\n        <iframe\n        [^>]*\n        src=\"https://embed-ssl.ted.com/talks/12345.html\"\n        ///\n\n    it 'renders TEDX video', ->\n      embed = video.embed({ player: 'TEDX', key: '12345' })\n      expect(embed).to.match ///\n        <iframe\n        [^>]*\n        src=\"http://tedxtalks.ted.com/video/12345/player\\?layout=&amp;read_more=1\"\n        ///\n\n    it 'renders CHANNEL9 video', ->\n      embed = video.embed({ player: 'CHANNEL9', key: '12345' })\n      expect(embed).to.match ///\n        <iframe\n        [^>]*\n        src=\"https://channel9.msdn.com/12345/player\"\n        ///\n\n    it 'renders HTML5 video', ->\n      embed = video.embed({ player: 'HTML5', options: 'mp4', key: 'https://example.com/video.mp4' })\n      expect(embed).to.match ///\n        <video\\s+controls\\s+width=\"100%\">\\s+\n        <source\\s+\n            src=\"https://example.com/video.mp4\"\\s+\n            type=\"video/mp4\"\n        ///\n\n    it 'renders fallback text when player is not recognized', ->\n      embed = video.embed({ player: 'DUMMY', key: '12345' })\n      expect(embed).to.be \"(unknown player)\"\n"
  ],
  "sourceRoot": ""
}